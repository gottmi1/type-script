- 클래스란?

오브젝트를 찍어내는 청사진.
ts에서는 클래스도 사용자가 만드는 타입의 하나이다.

- create class

class Person {}
이렇게만 해도 완성
보통 대문자로 시작 함.
new를 통하여 class와 같은 형태를 가진 객체를 찍어낼 수 있다.
constructor를 이용하면 밖에서 주는 값을 전달할 수도 있음.
this를 사용해 만들어진 객체를 가리킬 수 있다.


- constructor & initialize

class Person {
  name: stirng;
}
이렇게 달랑 name만 적어주면 초기화 되지 않아서 name의 값이 무엇인지 알 수가 없다.

class Person {
  name: stirng = "jinwon";
}
이렇게 값까지 할당해 줘야 한다.
strict모드가 아니면 에러는 없지만, 값이 undefined가 됨.

만약 class 바깥 런타임 상에서 Person.name에 값을 줘도 class는 그걸 알 방도가 없어서 계속 에러가 뜬다.
의도적으로 런타임상에서 값을 줘야하는 경우 name!: string; 을 준다. (에러를 띄우지 않겠다)
!:은 사용에 주의가 필요함.

1. 생성자 함수가 없으면 디폴트 생성자가 불린다.
2. 개발자가 만든 생성자가 하나라도 있으면 디폴트 생성자는 사라짐.
3. strict모드에서는 프로퍼티를 선언하는 곳 또는 생성자에서 값을 할당해야 한다.
4. 3번이 지켜지지 않을 경우 !를 붙여 주의를 표현함.
5. 클래스의 프로퍼티 값이 정의되지 않으면 결과 값은 undefined
6. 생성자 안에서는 async를 설정할 수 없다.


- 접근 제어자 (Access Modifiers)

public, private등 java와 같은 동작을 함.
디폴트 설정은 public임.
protected 라는 접근 제어자는 외부에서는 불가능하지만 상속 관계인 데에선 접근할 수가 있다.
private 프로퍼티를 작성할 땐 _props 처럼 이름 앞에 언더바를 붙이는 관습이 있따.


- initialize in constructor parameters

class Person {
  constructor(public name: string, private age: number) { }
}

컨스트럭터로 한 번에 설정 가능


- Getters & Setters

.name과 같이 값을 받아오는 일을 하는 함수를 getter
.name = "jinwon kim"처럼 값을 세팅해주는 일을 하는 함수를 setter
라고 함.
java처럼 변수는 private로 놓고 게터와 세터 메서드로 가져오고, 변경하고 하는 것 같다

  get name() {
    return this._name + " kim";
  }
  set name(name: string) {
    this._name = name;
  }

이런 형식.


- readonly properties

readonly는 변경할 수 없는 값이다
퍼블릭이든 프라이빗이든 변경할 수 없다.
리드온리라면 클래스에서 선언만 해 놓고 컨스터럭터에서 값을 할당하는 것 까지만 가능
★프로퍼티를 초기값으로 고정하고 바꾸고 싶지 않을 때 주로 사용한다.


- index Signatures in class

프로퍼티가 고정이 아니라 동적으로 프로퍼티 명이 들어와야 할 때 고려해야할 기능.

class Students {
  [index: string]: 'male' | 'female';
}
예를 들어 이런 클래스가 있고 이 클래스로 a 오브젝트를 만들었다고 가정하면,

a.jinwon = 'male' 했을 때
a에 jinwon이라는 props가 'male'이라는 값으로 들어가게 된다.

앞에 [index:string]은 props가 문자열 형태라는 걸 정한 거고, 값은 'male', 'female' 두 개만 할당 가능함.




-- Static Properties & Methods

class Person {
  public static hello() {
    console.log('hello')
  }
}

const p1 = new Person();

p1.hello();
Person.hello();
이 경우,
hello가 static메서드가 아닐 때 p1에서 접근하는 것만 가능하고
hello가 static메서드일 때는 Person에서만 접근할 수 있다.

-- Singletons

싱글톤 패턴이란 static을 사용하기에 좋은? 패턴이다.
단일 객체 패턴으로 한 클래스로는 하나의 객체만 만들어야 하는 패턴임.
기억할 만한 건 컨스터럭터를 프라이빗으로 설정하여 new키워드로 새 객체를 만드는 것을 막아야하고
static으로 props를 줘서 이름을 여러개 줘도 모두 같은 객체를 가리켜야 함.



- 상속(inheritance)

아무 것도 추가하지 않고 그냥 extend로 상속만 받으면 부모 클래스의 형태와 똑같은 형태가된다.

protected와 private를 적절히 사용하여 각자의 영역에서 다른 영역으로 전파되지 않게 막는 것이 중요하다.
자식 클래스에서 컨스트럭터를 사용하려면 가장 먼저 super로 선언된 변수에 값을 할당해주어야 한다.

- Abstract Classes

이 키워드를 이용하면 완전하지 않은 class를 포함할 수 있다.
완전하지 않은 class는 new키워드를 사용해 객체를 만들 수 없음.
어느 때 사용하는진 모르겠는데 하여튼 이 손상된 클래스를 상속받아서 그 부분을 고쳐서 사용한다.
