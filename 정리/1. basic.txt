type annotation
변수나 상수를 선언할 때 타입을 지정해주는 것
typescript를 사용하는 이유이다.

장점 
js에선
funtion add(n1,n2) {
  if (typeof n1 !== 'number' || typeof n2 !== 'number') {
    throw new Error("에러")
  }
  return n1+n2;
}
이렇게 검사해야할 것을 타입을 정해줌으로써
function add(n1:number,n2:number) {
  return n1+n2;
}
이렇게 사용 가능

프로그램이 유용하려면 가장 간단한 데이터 단위로 작업할 수 있어야한다

ECMAscript 표준 기본 자료형 6가지를 사용.

string
number
boolean
null
undefined
symbol

array: object형태

typescript에선 프로그래밍을 도울 몇가지 타입이 더 제공됨.

any,void,never,unknown
enum

tuple : object형태



- primitive Types

오브젝트와 레퍼런스 형태가 아닌 실제 값을 저장하는 자료형

리터럴 값(값 자체를 문자로 할당하는)으로 primitive타입의 서브타입을 나타낼 수 있음.

래퍼 객체로 만들 수도 있다 JAVA와 유사함.
new Boolean(false); 이런식. typeof로 검사하면 object가 나옴

근데 typescript에선 이렇게 사용하지 않는 걸 권장.


★typescript의 핵심 primitive타입은 모두 소문자이다. a:String 식으로 사용하면 안되고 a:string이 맞다

- symbol

ECMAscript 2015에서 추가됨
Symbol을 함수로 사용하여 symbol 타입을 만들 수 있다.

보통 프리미티브 타입의 값을 담아서 사용한다.
수정 불가능한 고유(unique)한 값으로 만들어줌.
접근을 제어할 때 많이 쓰인다고 한다.

- tuple 

각 항목의 타입을 정할 수 있는 배열

let x: [string,number];

x = ["hello",22];
이렇게 사용할 수 있음


- any 

어떤 타입인지 정확히 예측할 수 없을 때 사용.
되도록 쓰지말자.

- unknown

any처럼 예측할 수 없는 변수의 타입을 정해야할 때 사용.

any보다 type-safe한 타입.
1. any와 같이 아무거나 할당할 수 있으나
2. 컴파일러가 타입을 추론할 수 있게끔 타입의 유형을 좁히거나 타입을 확정해주지 않으면 다른 곳에 할당할 수 없고 사용할 수도 없다.

runtime에러를 줄이는데 도움이 됨.

- never

일반적으로 retrun에 사용됨.
never타입은 모든 타입의 subtype이며 모든 타입에 할당할 수 있다.
그러나 never에는 그 어떤것도 할당할 수가 없음.
잘못된 타입을 넣는 실수를 방지하고자 할 때 사용함.

- void

undefined를 return하기 위해 사용한다. JAVA와는 다르게 쓰인다.
:void타입의 함수가 있다면 이 함수로는 아무것도 하지 않겠다고 명시적으로 표현한 것임.
return 값에 undefined만 할당이 가능하다.
